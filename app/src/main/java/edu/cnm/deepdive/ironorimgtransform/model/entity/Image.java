package edu.cnm.deepdive.ironorimgtransform.model.entity;

import android.arch.persistence.room.ColumnInfo;
import android.arch.persistence.room.Entity;
import android.arch.persistence.room.ForeignKey;
import android.arch.persistence.room.PrimaryKey;
import java.util.Date;

/**
 * Encapsulates the attributes of a single image including the id of the transform type applied to
 * the image if applicable. Room and GSon * annotations are used to specify entity &amp; attribute
 * mapping for database persistence, and * property mapping for JSON serialization/deserialization
 * mapping.
 */
@Entity(foreignKeys = @ForeignKey(entity = Transform.class, parentColumns = "transform_id",
    childColumns = "transform_id", onDelete = ForeignKey.CASCADE))

public class Image {

  @ColumnInfo(name = "image_id")
  @PrimaryKey(autoGenerate = true) // assures there's always a unique key
  private long id;

  @ColumnInfo(name = "external_url", index = true)
  private String externalUrl;

  @ColumnInfo(name = "internal_url", index = true)
  private String internalURL;

  @ColumnInfo(name = "transform_id", index = true)
  private Long transformId;

  @ColumnInfo(name = "timestamp", index = true)
  private Date timestamp;

  @ColumnInfo(name = "info", index = true)
  private String info;

  @ColumnInfo(name = "from_id")
  private Long fromId;

  /**
   * Returns the autogenerated primary key of this instance.
   *
   * @return primary key value.
   */
  public long getId() {
    return id;
  }

  /**
   * Sets the primary key of this instance. This method is invoked by Room to set the autogenerated
   * value of a new instance, and when loading an existing instance from the database.
   *
   * @param id primary key value.
   */
  public void setId(long id) {
    this.id = id;
  }

  /**
   * Returns the external url of this instance.
   *
   * @return externalUrl of {@link Image}.
   */
  public String getExternalUrl() {
    return externalUrl;
  }

  /**
   * Sets the external url of this instance.
   *
   * @param externalUrl exernalUrl value.
   */
  public void setExternalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
  }

  /**
   * Returns the internal url of this instance.
   *
   * @return internalUrl of {@link Image}.
   */
  public String getInternalURL() {
    return internalURL;
  }

  /**
   * Sets the external url of this instance.
   *
   * @param internalURL internalUrl value.
   */
  public void setInternalURL(String internalURL) {
    this.internalURL = internalURL;
  }

  /**
   * Returns the id of the {@link Transform} of this instance.
   *
   * @return id of {@link Transform}.
   */
  public Long getTransformId() {
    return transformId;
  }

  /**
   * Sets the id of this instance.
   *
   * @param transformId {@link Transform} id.
   */
  public void setTransformId(Long transformId) {
    this.transformId = transformId;
  }

  /**
   * Returns the timestamp (only) of this instance.
   *
   * @return Timestamp of Transform.
   */
  public Date getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the timestamp (only) of this instance. This method is invoked by Room and GSon after
   * loading from the database and JSON deserialization, respectively.
   *
   * @param timestamp Transform timestamp.
   */
  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }

  /**
   * Returns the explanation (descriptive information) of this instance.
   *
   * @return Image explanation.
   */
  public String getInfo() {
    return info;
  }

  /**
   * Sets the explanation (descriptive information) of this instance. This method is invoked by Room
   * and GSon after loading from the database and JSON deserialization, respectively.
   *
   * @param info Image explanation (descriptive information).
   */
  public void setInfo(String info) {
    this.info = info;
  }

  /**
   * Returns the id of the image from which the current image was directly derived.
   * @return Image explanation.
   */
  public Long getFromId() {
    return fromId;
  }

  /**
   * Sets the id of the image from which the current image was directly derived.
   * @param fromId source {@link Image} instance.
   */
  public void setFromId(Long fromId) {
    this.fromId = fromId;
  }
}
